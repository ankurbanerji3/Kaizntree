{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = 0; //page * TRANSACTIONS_PER_PAGE;\n\n  const end = page * TRANSACTIONS_PER_PAGE + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n}; // export const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n//   if (!employeeId) {\n//     return data.transactions;\n//   }\n//   return data.transactions.filter((transaction) => transaction.employee.id === employeeId);\n// };\n\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId,\n    page = 0\n  } = _ref2;\n  console.log(employeeId);\n  let filteredTransactions = data.transactions; // If employeeId is provided, filter transactions by the provided employeeId\n\n  if (employeeId) {\n    filteredTransactions = filteredTransactions.filter(transaction => transaction.employee.id === employeeId);\n  } // Calculate pagination\n\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const paginatedTransactions = filteredTransactions.slice(start, start + TRANSACTIONS_PER_PAGE);\n  return paginatedTransactions;\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","console","log","filteredTransactions","filter","transaction","employee","id","paginatedTransactions","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["C:/Users/shrey/Desktop/stuff/MS stuff/shreyas/application materials/CV/Internship Applications/OAs/Fulltime/Kaizntree/src/utils/requests.ts"],"sourcesContent":["import { PaginatedRequestParams, PaginatedResponse, RequestByEmployeeParams, SetTransactionApprovalParams, Transaction, Employee } from \"./types\";\nimport mockData from \"../mock-data.json\";\n\nconst TRANSACTIONS_PER_PAGE = 5;\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n};\n\nexport const getEmployees = (): Employee[] => data.employees;\n\nexport const getTransactionsPaginated = ({ page }: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = 0; //page * TRANSACTIONS_PER_PAGE;\n  const end = page * TRANSACTIONS_PER_PAGE + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  };\n};\n\n// export const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n//   if (!employeeId) {\n//     return data.transactions;\n//   }\n\n//   return data.transactions.filter((transaction) => transaction.employee.id === employeeId);\n// };\n\nexport const getTransactionsByEmployee = ({ employeeId, page = 0 }: RequestByEmployeeParams) => {\n  console.log(employeeId);\n\n  let filteredTransactions = data.transactions;\n\n  // If employeeId is provided, filter transactions by the provided employeeId\n  if (employeeId) {\n    filteredTransactions = filteredTransactions.filter((transaction) => transaction.employee.id === employeeId);\n  }\n\n  // Calculate pagination\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const paginatedTransactions = filteredTransactions.slice(start, start + TRANSACTIONS_PER_PAGE);\n\n  return paginatedTransactions;\n};\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find((currentTransaction) => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};\n"],"mappings":"AACA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAAwE;EAAA,IAAvE;IAAEC;EAAF,CAAuE;;EAC9G,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAG,CAAd,CAL8G,CAK7F;;EACjB,MAAMC,GAAG,GAAGH,IAAI,GAAGN,qBAAP,GAA+BA,qBAA3C;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CAlBM,C,CAoBP;AACA;AACA;AACA;AAEA;AACA;;AAEA,OAAO,MAAMI,yBAAyB,GAAG,SAAuD;EAAA,IAAtD;IAAEC,UAAF;IAAcR,IAAI,GAAG;EAArB,CAAsD;EAC9FS,OAAO,CAACC,GAAR,CAAYF,UAAZ;EAEA,IAAIG,oBAAoB,GAAGhB,IAAI,CAACE,YAAhC,CAH8F,CAK9F;;EACA,IAAIW,UAAJ,EAAgB;IACdG,oBAAoB,GAAGA,oBAAoB,CAACC,MAArB,CAA6BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BP,UAAzE,CAAvB;EACD,CAR6F,CAU9F;;;EACA,MAAMN,KAAK,GAAGF,IAAI,GAAGN,qBAArB;EACA,MAAMsB,qBAAqB,GAAGL,oBAAoB,CAACL,KAArB,CAA2BJ,KAA3B,EAAkCA,KAAK,GAAGR,qBAA1C,CAA9B;EAEA,OAAOsB,qBAAP;AACD,CAfM;AAiBP,OAAO,MAAMC,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAMN,WAAW,GAAGlB,IAAI,CAACE,YAAL,CAAkBuB,IAAlB,CAAwBC,kBAAD,IAAwBA,kBAAkB,CAACN,EAAnB,KAA0BG,aAAzE,CAApB;;EAEA,IAAI,CAACL,WAAL,EAAkB;IAChB,MAAM,IAAIZ,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDY,WAAW,CAACS,QAAZ,GAAuBH,KAAvB;AACD,CARM"},"metadata":{},"sourceType":"module"}